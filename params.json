{"name":"DataStax Enterprise Mesos Framework","tagline":"","body":"Datastax Enterprise Mesos Framework\r\n==================================\r\n\r\n[Description](#description)    \r\n[Installation](#installation)\r\n* [Prerequisites](#prerequisites)\r\n* [Scheduler configuration](#scheduler-configuration)\r\n* [Run the scheduler](#run-the-scheduler)\r\n* [Quick start](#quick-start)\r\n* [Richer usage example](https://github.com/elodina/datastax-enterprise-mesos/tree/master/richer_usage_example.md)\r\n\r\n[Typical operations](#typical-operations)\r\n* [Shutting down framework](#shutting-down-framework)\r\n\r\n[Navigating the CLI](#navigating-the-cli)\r\n* [Requesting help](#requesting-help)  \r\n\r\nDescription\r\n-----------\r\n\r\nThis framework aims to simplify running Datastax Enterprise on Mesos. Being actively developed right now.\r\n\r\nCurrently this framework supports running Cassandra nodes only.\r\n\r\nOpen issues here https://github.com/elodina/datastax-enterprise-mesos/issues\r\n\r\nInstallation\r\n============\r\nPrerequisites\r\n-------------\r\n\r\nMinimum supported Mesos version is 0.23.0\r\n\r\nClone and build the project\r\n\r\n    # git clone https://github.com/elodina/datastax-enterprise-mesos\r\n    # cd datastax-enterprise-mesos\r\n    # ./gradlew jar\r\n    \r\nGet Java 7 JRE\r\n\r\n    # wget --no-check-certificate --no-cookies --header \"Cookie: oraclelicense=accept-securebackup-cookie\" http://download.oracle.com/otn-pub/java/jdk/7u79-b15/jre-7u79-linux-x64.tar.gz\r\n    \r\nGet Datastax Enterprise distribution\r\n\r\n    # wget --user user --password pass http://downloads.datastax.com/enterprise/dse.tar.gz\r\n    \r\nScheduler configuration\r\n-----------------------\r\n\r\n```\r\n# ./dse-mesos.sh help scheduler\r\nStart scheduler\r\nUsage: scheduler [options]\r\n\r\nOption (* = required)  Description\r\n---------------------  -----------\r\n--debug <Boolean>      Run in debug mode. (default: false)\r\n--framework-name       Framework name. Defaults to dse.\r\n--framework-role       Framework role. Defaults to *.\r\n--framework-timeout    Framework failover timeout. Defaults\r\n                         to 30 days.\r\n--jre                  Path to JRE archive.\r\n* --master             Mesos Master addresses.\r\n--principal            Principal (username) used to register\r\n                         framework.\r\n--secret               Secret (password) used to register\r\n                         framework.\r\n--storage              Storage for cluster state. Examples:\r\n                         file:dse-mesos.json; zk:master:\r\n                         2181/dse-mesos.\r\n--user                 Mesos user. Defaults to current system\r\n                         user.\r\n\r\nGeneric Options\r\nOption  Description\r\n------  -----------\r\n--api   Binding host:port for http/artifact\r\n          server. Optional if DM_API env is\r\n          set.\r\n```\r\n    \r\nQuick start\r\n-----------\r\n\r\nIn order not to pass the API url to each CLI call lets export the URL as follows:\r\n```\r\n# export DM_API=http://master:7000\r\n```\r\nFirst lets start 1 Cassandra node with the default settings. Further you will see how to change node settings.\r\n\r\n```\r\n# ./dse-mesos.sh node add 0\r\nnode added:\r\n  id: 0\r\n  state: idle\r\n  topology: cluster:default, dc:default, rack:default\r\n  resources: cpu:0.5, mem:512\r\n  seed: false\r\n  stickiness: period:30m\r\n```\r\n    \r\nYou now have a cluster with 1 Cassandra node that is not started.    \r\n\r\n```\r\n# ./dse-mesos.sh node list\r\nnode:\r\n  id: 0\r\n  state: idle\r\n  topology: cluster:default, dc:default, rack:default\r\n  resources: cpu:0.5, mem:512\r\n  seed: false\r\n  stickiness: period:30m\r\n```\r\n\r\nNow lets start the task. This call to CLI will block until the task is actually started but will wait no more than a configured timeout. Timeout can be passed via --timeout flag and defaults to 2 minutes. If a timeout of 0s is passed CLI won't wait for tasks to start at all and will reply with \"Scheduled tasks ...\" message.\r\n\r\n```\r\n# ./dse-mesos.sh node start 0\r\nnode started:\r\n  id: 0\r\n  state: running\r\n  topology: cluster:default, dc:default, rack:default\r\n  resources: cpu:0.5, mem:512\r\n  seed: true\r\n  stickiness: period:30m, hostname:slave0\r\n  runtime:\r\n    task id: node-0-1449579588537\r\n    executor id: node-0-1449579588537\r\n    slave id: faa6dc48-30d4-4385-8cd4-d0be512e0521-S1\r\n    hostname: slave0\r\n    seeds: slave0\r\n```\r\n\r\nBy now you should have a single Cassandra node instance running. You should be able to connect to it via `cqlsh <hostname>` (in our case `cqlsh slave0` should work).\r\n\r\nHere's how you stop it:\r\n\r\n```\r\n# ./dse-mesos.sh node stop 0\r\nnode stopped:\r\n  id: 0\r\n  state: idle\r\n  topology: cluster:default, dc:default, rack:default\r\n  resources: cpu:0.5, mem:512\r\n  seed: true\r\n  stickiness: period:30m, hostname:slave0, expires:2015-12-22 16:23:29+02\r\n```\r\n\r\nAnd remove:\r\n\r\n```\r\n# ./dse-mesos.sh node remove 0\r\nnode removed\r\n```\r\n    \r\nTypical operations\r\n=================\r\nShutting down framework\r\n-----------------------\r\n\r\nWhile the scheduler has a shutdown hook it doesn't actually finish the framework.\r\nTo shutdown the framework completely (e.g. unregister it in Mesos) you may shoot a\r\n`POST` to `/teardown` specifying the framework id to shutdown:\r\n\r\n```\r\n# curl -d frameworkId=20150807-094500-84125888-5050-14187-0005 -X POST http://master:5050/teardown\r\n```\r\n\r\nNavigating the CLI\r\n==================\r\nRequesting help\r\n--------------\r\n\r\n```\r\n# ./dse-mesos.sh help\r\nUsage: <cmd> ...\r\n\r\nCommands:\r\n  help [cmd [cmd]] - print general or command-specific help\r\n  scheduler        - start scheduler\r\n  node             - node management commands\r\n  cluster          - cluster management commands\r\n\r\nRun `help <cmd>` to see details of specific command\r\n```\r\n\r\nYou may also run `./dse-mesos.sh help <cmd> [<cmd>]` to view help of specific command/sub-command.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}